//
// nekRS User Defined File
//
#include "udf.hpp"
#include <math.h>

static occa::kernel cFillKernel;
static occa::kernel cCopyKernel;
static int updateProperties = 1;
std::vector<dfloat> localq;

void userq(nrs_t* nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  // auto mesh = nrs->cds->mesh;
  // o_FS.copyFrom(localq.data(), mesh->Nelements * mesh->Np * sizeof(dfloat), 0);

  cds_t *cds   = nrs->cds;
  mesh_t *mesh = cds->mesh;

  double *qarray = (double *) nek_scPtr(1);
  o_FS.copyFrom(qarray, mesh->Nelements * mesh->Np * sizeof(dfloat), 0);
}

void uservp(nrs_t* nrs,
            dfloat time,
            occa::memory o_U,
            occa::memory o_S,
            occa::memory o_UProp,
            occa::memory o_SProp)
{
  cds_t* cds = nrs->cds;

  if (updateProperties) {
    const dfloat rho = 1.0;
    const dfloat mue = 0.2;
    const dfloat rhoCpFluid = rho * 3.9;
    const dfloat conFluid = mue * 3.9;
    const dfloat rhoCpSolid = rhoCpFluid * 0.01;
    const dfloat conSolid = 3.9 * conFluid;

    // velocity
    const occa::memory o_mue = o_UProp.slice(0 * nrs->fieldOffset * sizeof(dfloat));
    const occa::memory o_rho = o_UProp.slice(1 * nrs->fieldOffset * sizeof(dfloat));
    cFillKernel(nrs->mesh->Nelements, mue, 0, nrs->mesh->o_elementInfo, o_mue);
    cFillKernel(nrs->mesh->Nelements, rho, 0, nrs->mesh->o_elementInfo, o_rho);
    // temperature
    const occa::memory o_con = o_SProp.slice(0 * cds->fieldOffset * sizeof(dfloat));
    const occa::memory o_rhoCp = o_SProp.slice(1 * cds->fieldOffset * sizeof(dfloat));


    double* nekScratch = nekData.cbscnrs;
    o_SProp.copyFrom(nekScratch, cds->Nlocal * sizeof(dfloat), 0);

    // cFillKernel(cds->mesh->Nelements, conFluid, conSolid, nrs->mesh->o_elementInfo, o_con);
    cFillKernel(cds->mesh->Nelements, rhoCpFluid, rhoCpSolid, nrs->mesh->o_elementInfo, o_rhoCp);
    updateProperties = 0;
  }
}

/* UDF Functions */

void UDF_LoadKernels(nrs_t* nrs)
{
  cFillKernel = udfBuildKernel(nrs, "cFill");
  cCopyKernel = udfBuildKernel(nrs, "cCopy");
}

void UDF_Setup(nrs_t* nrs)
{
  // nek_userchk();
  updateProperties = 1;

  udf.sEqnSource = &userq;
  udf.properties = &uservp;

  // ATTENTION: Need to explicitly resize localq
  localq.resize(nrs->cds->mesh->Nelements * nrs->cds->mesh->Np);
}

void UDF_ExecuteStep(nrs_t* nrs, dfloat time, int tstep)
{
    nrs->flow = 0;
    nek_ocopyFrom(time, tstep);
    nek_userchk();
    updateProperties = 1;
}
